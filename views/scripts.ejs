<!-- views/scripts -->
<script>
    function getCurrentRoute() {
        const fullPath = window.location.pathname;
        const parts = fullPath.split('/');

        // Get the first part of the route (after removing the leading slash)
        let baseRoute = parts[2] || '';

        // Remove the hash if it exists
        if (baseRoute.includes('#')) {
            baseRoute = baseRoute.split('#')[0];
        }
        return `/${baseRoute}`;
    }

    // Function to update the "active" class based on the current route
    function updateActiveClass() {
        const currentRoute = getCurrentRoute();

        // Remove the "active" class from all links
        document.querySelectorAll('.sidebar-link').forEach(link => {
            link.classList.remove('active');
        });

        // Add the "active" class to the link with a matching route
        const activeLink = document.getElementById(currentRoute);
        if (activeLink) {
            activeLink.classList.add('active');
        }
    }

    // Add click event listeners to all sidebar links
    document.querySelectorAll('.sidebar-link').forEach(link => {
        if(link){
            link.addEventListener('click', updateActiveClass);
        }
    });

    // Update the "active" class on page load
    window.addEventListener('load', updateActiveClass);


    const sidebar = document.getElementById('sidebar');
    const span_data = sidebar.querySelectorAll('span');
    const toggleButton = document.querySelector('#toggleButton');
    const content = document.querySelector('.content');
    
    sidebar.addEventListener('mouseenter', () => {
        if (sidebar.classList.contains('shrink')) {
            sidebar.style.width = "250px";                
            content.classList.toggle('expand');
            content.classList.add('expand');
            content.style.marginLeft = "250px";
            span_data.forEach(span => {
                span.style.display = "block";
            });
            toggleButton.style.left = "260px";
        }
    });

    sidebar.addEventListener('mouseleave', () => {
        if (sidebar.classList.contains('shrink')) {
            sidebar.style.width = "50px";                
            content.classList.toggle('expand');
            content.classList.add('expand');
            content.style.marginLeft = "50px";
            span_data.forEach(span => {
                span.style.display = "none";
            });
            toggleButton.style.left = "60px";
        }
    });

    function toggleSidebar() {
        const sidebar = document.getElementById('sidebar');
        if(sidebar.classList.contains('shrink')){
            sidebar.classList.remove('shrink');
            sidebar.style.width = "250px";                
            content.classList.toggle('expand');
            content.classList.add('expand');
            content.style.marginLeft = "250px";
            span_data.forEach(span => {
                span.style.display = "block";
            });
            toggleButton.style.left = "260px";
        }
        else{
            sidebar.classList.toggle('shrink');
            sidebar.classList.add('shrink');
            sidebar.style.width = "50px";
            content.classList.toggle('expand');
            content.classList.add('expand');
            content.style.marginLeft = "50px";
            span_data.forEach(span => {
                span.style.display = "none";
            });
            toggleButton.style.left = "60px";
        }
    }

    function formatNumber(amount) {
        // Use toLocaleString to add commas as separators for thousands
        // and toFixed(2) to ensure two decimal places
        return parseFloat(amount).toLocaleString('en-US', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2 
        });
    }

    // Date and Time Decoder
    function date_decoder(utcTime) {
        var utcDate = new Date(utcTime);
        var options = {
        year: 'numeric',
        month: 'long',
        day: '2-digit',
        };
        var utcPlus8Time = utcDate.toLocaleString('en-US', options);
        
        return utcPlus8Time;
    }

    function date_decoder2(utcTime) {
        var utcDate = new Date(utcTime);
        var options = {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
        };
        var formattedDate = utcDate.toLocaleString('en-US', options);
        
        // Extract the parts and format them as yyyy-MM-dd
        var parts = formattedDate.split('/');
        if (parts.length === 3) {
            var year = parts[2];
            var month = parts[0].padStart(2, '0');
            var day = parts[1].padStart(2, '0');
            return year + '-' + month + '-' + day;
        }

        // If the date format is not as expected, return the original formatted date.
        return formattedDate;
    }

        function formatDate(date) {
        return new Date(date).toLocaleString('en-US', {
            weekday: 'short',
            month: 'short',
            day: 'numeric',
            year: 'numeric',
            hour: 'numeric',
            minute: 'numeric',
            second: 'numeric',
            hour12: true
        });
    }
</script>
</body>
</html>